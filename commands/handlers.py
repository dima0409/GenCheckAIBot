import base64
import os

from aiogram import F, Router
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile, CallbackQuery, Message
from dotenv import load_dotenv

from api.kandinsky import Text2ImageAPI
import commands.keyboards as kb
from commands.queue_manager import queue
from db import database
from file import file_manager

load_dotenv()

fm = file_manager.FileManager()
db = database.Database()

API_KEY = os.environ["API_KEY"]
SECRET_KEY = os.environ["SECRET_KEY"]

router = Router()

text2image = Text2ImageAPI(
    "https://api-key.fusionbrain.ai/",
    API_KEY,
    SECRET_KEY,
)


class Generate(StatesGroup):
    prompt = State()


class Collecting(StatesGroup):
    dataset = State()


class Training(StatesGroup):
    detect = State()


@router.message(CommandStart())
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '/start'.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GenCheckAI \n"
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        ' –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é "–ö–∞–¥–∏–Ω—Å–∫–∏–π", –∞ —Ç–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å,'
        " —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º. \n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É",
        reply_markup=kb.keyboard_main,
    )


@router.message(F.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ‚úèÔ∏è")
async def gen(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ‚úèÔ∏è'.

    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await state.set_state(Generate.prompt)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:")


@router.message(Generate.prompt)
async def prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º—Ç–æ–º.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç:
        1. –°–æ—Ö—Ä–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞.
        2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API Kadinskiy.
        3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    await state.update_data(promt=message.text)
    data = await state.get_data()
    await state.clear()
    a = await message.answer("–û–∂–∏–¥–∞–π—Ç–µ...")
    model_id = await text2image.get_model()
    uuid = await text2image.generate(data["promt"], model_id)
    images = await text2image.check_generation(uuid)
    image = str(images)
    image_bytes = base64.b64decode(image)
    await a.delete()
    await message.answer_photo(
        BufferedInputFile(file=image_bytes, filename="result.png"),
        caption="–í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ \n –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É",
        reply_markup=kb.keyboard_main,
    )


@router.message(F.text == "–ü–æ–º–æ—â—å –ø—Ä–æ–µ–∫—Ç—É üóÉÔ∏è")
async def help(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å –ø—Ä–æ–µ–∫—Ç—É üóÉÔ∏è'.

    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ.

    Args:
        message: –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await state.set_state(Collecting.dataset)
    help_message = await message.reply(
        "–¢—ã –≤–æ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–º–æ—â–∏ –ø–æ —Å–±–æ—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML-–º–æ–¥–µ–ª–∏. "
        "–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è —Å–ø—Ä–æ—à—É, "
        "—è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã–º –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ò–ò. \n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ.",
    )
    await state.update_data(help_message_id=help_message.message_id)


@router.message(Collecting.dataset)
async def dataset(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏,
    –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    user_id = message.from_user.id
    image = message.photo[-1].file_id
    await state.update_data(user_id=user_id, image=image)
    await message.delete()
    dataset_message = await message.answer_photo(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
        photo=image,
        reply_markup=kb.keyboard_image,
    )
    await state.update_data(dataset_message_id=dataset_message.message_id)


@router.callback_query(lambda call: call.data == "ai")
async def ai(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 'AI' –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        callback: CallbackQuery –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç:
        1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é 'AI'.
        2. –ó–∞–ø–∏—Å—å –≤ –ë–î.
        3. –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    data = await state.get_data()
    user_id = data["user_id"]
    image = data["image"]
    await callback.bot.download(file=image, destination=f"{image}.png")
    await fm.save_image(str(user_id), f"{image}.png", "ai")
    await db.add_image(user_id, "ai", f"images\\{user_id}\\ai\\{image}.png")
    await state.clear()
    await db.close()
    await callback.bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=data["help_message_id"],
    )
    await callback.bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=data["dataset_message_id"],
    )
    await callback.bot.send_photo(
        chat_id=user_id,
        photo=image,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ –≤ '–ê–∏ ü§ñ'",
    )


@router.callback_query(lambda call: call.data == "real")
async def real(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 'Real' –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        callback: CallbackQuery –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç:
        1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é 'Real'.
        2. –ó–∞–ø–∏—Å—å –≤ –ë–î.
        3. –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    data = await state.get_data()
    user_id = data["user_id"]
    image = data["image"]
    await callback.bot.download(file=image, destination=f"{image}.png")
    await fm.save_image(str(user_id), f"{image}.png", "real")
    await db.add_image(
        user_id,
        "real",
        f"images\\{user_id}\\real\\{image}.png",
    )
    await state.clear()
    await db.close()
    await callback.bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=data["help_message_id"],
    )
    await callback.bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=data["dataset_message_id"],
    )
    await callback.bot.send_photo(
        chat_id=user_id,
        photo=image,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ –≤ '–†–µ–∞–ª—å–Ω–æ–µ üì∏'",
    )


@router.message(F.text == "–î–µ—Ç–µ–∫—Ü–∏—è ü§ñ")
async def ml(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–µ—Ç–µ–∫—Ü–∏—è'.

    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await state.set_state(Training.detect)
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


@router.message(Training.detect, F.photo)
async def detect(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏.

    –ü–æ–º–µ—â–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É ML –º–æ–¥–µ–ª—å—é.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    file_id = message.photo[-1].file_id
    await queue.put((file_id, message, state))


@router.message(StateFilter(None))
async def cmd_cancel_no_state(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª")
